# phrases represent a group of responses (generated by ChatGPT) give a specific
# set of personality traits and situational cues.
# 
# These responses are cached to disk once generated and a random one is selected

import random
from persistance.persistable import Persistable
from personality import Personality
import openai_service.openai_service as openai


class PhraseGroup(Persistable):
    directory = ""
    filename = ""
    # TODO: avoid re-pickling the personality for phrases
    personality: Personality = None
    instructions = []
    responses = ["Foobar respose"]

    def __init__(self, personality: Personality, instructions = [], responses = []):
        self.directory = personality.directory
        self.filename = "greetings.pkl"
        self.personality = personality
        self.instructions = instructions
        self.responses = responses

    def get_random_response(self):
        if len(self.responses) < 5:
            response = openai.get_specific_completion(messages = [
                {"role": "system", "content": "You are helpful, friendly companion. You are " +
                 self.personality.physical_attributes[0] + ", wear a " + self.personality.clothing[0] +
                 ", and your voice is " + self.personality.vocal_attributes[0]},
                 {"role": "system", "content": self.instructions[0]},
                 {"role": "user", "content": "Good morning!"},
            ])

            content = response["content"]
            self.responses.append(content)
            return content
        else:
            return random.choice(self.responses)